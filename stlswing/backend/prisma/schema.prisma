// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedIndexes", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TableNames {
  History
  Todo
  TodoList
  User
  Permission
}

// model User {
//   id          String @id @default(cuid())
//   email       String @unique
//   displayName String
//   phone       Int?
//   photoUrl    String

//   draft     Boolean  @default(false)
//   createdAt DateTime @default(now()) @db.Timestamptz()
//   updatedAt DateTime @updatedAt() @db.Timestamptz()
//   createdBy String?
//   updatedBy String?
// }

model TodoList {
  id       String    @id @default(cuid())
  deadline DateTime? @db.Timetz()
  title    String
  // Defaults
  draft     Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdBy String?
  updatedBy String?
  // Relational Definitions
  todos Todo[]
}

model Todo {
  id        String   @id @default(uuid())
  text      String
  completed Boolean  @default(false)
  deadline  DateTime @db.Timestamptz()
  // Defaults
  draft     Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdBy String?
  updatedBy String?
  // Relations
  todoListId String?
  personId   String?
  // References
  TodoList TodoList? @relation(fields: [todoListId], references: [id])
  Person     Person? @relation(fields: [personId], references: [id])
}

model Person {
  id   String @id @default(uuid())
  name String
  age  Int
  // Defaults
  draft     Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdBy String?
  updatedBy String?
  // References
  friendId String?
  // Relations
  todos Todo[]
  friend Person? @relation("Friends", fields: [friendId], references: [id])
  friends Person[] @relation("Friends")
}


// ================================ USER ====================================== //
model User {
  id Int @id @default(autoincrement())
  email       String @unique
  displayName String
  phone       String?
  photoUrl    String
  // Defaults
  draft     Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdBy String?
  updatedBy String?

  // Relations
  permission Permission? //
}
// =================================================================================== //

// ================================ PERMISSION ====================================== //
model Permission {
  id Int @id @default(autoincrement())
  userId Int @unique

  role Role
  groups Group[]

  user User @relation(fields: [userId], references: [id])

  @@index([role])
  @@index([userId], type: Hash)
}

enum Role {
  Admin
  Employee
  Customer
  Visitor
}

enum Group {
  Developer
  Member
}
// =================================================================================== //

// ================================ HISTORY ====================================== //
model History {
  id Int @id @default(autoincrement())
  tableName TableNames
  date DateTime @db.Timestamptz() @default(now())
  operation Operation
  newState Json
  previousState Json

  createdAt DateTime @db.Timestamptz() @default(now())
  createdBy String
  updatedBy String

  @@index([id], type: Hash)
  @@index([createdAt(sort: Desc)])
}

enum Operation {
  createOne
  updateOne
  duplicateOne
  multiplyOne
  createMany
  updateMany
}

// =================================================================================== //

// model Product {
//   id    String    @id @default(uuid())
//   productType ProductType

//   socialEvent SocialEvent?
//   groupClass GroupClass?
// }

// model SocialEvent {
//   productId String     @unique
//   product   Product @relation(fields: [productId], references: [id])
//   name String

//   draft Boolean @default(false)
//   createdAt DateTime @db.Timestamptz() @default(now())
//   updatedAt DateTime @db.Timestamptz() @updatedAt()
//   createdBy String?
//   updatedBy String?
// }

// model GroupClass {
//   productId String     @unique
//   product   Product @relation(fields: [productId], references: [id])
//   name String

//   draft Boolean @default(false)
//   createdAt DateTime @db.Timestamptz() @default(now())
//   updatedAt DateTime @db.Timestamptz() @updatedAt()
//   createdBy String?
//   updatedBy String?
// }

// enum ProductType {
//   SocialEvent
//   GroupClass
// }

// model Order {
//   userId    Int
//   productId Int
//   @@unique([userId, productId])
// }
