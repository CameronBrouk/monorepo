
// NOTES:
// We HIGHLY suggest using your editor to 'Fold All' when working within this file.
// Prisma does not currently support multiple files.  With everything folded, it's pretty clean.
// Without everything folded, it's extremely annoying to work within this file.
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================ USER ====================================== //
model User {
  // Identifiers
  id               Int  @id @default(autoincrement())
  // External Identifiers
  firebaseId       Int
  stripeCustomerId Int?

  // Table Defaults
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()

  // Data
  email       String  @unique
  displayName String
  phone       String?
  photoUrl    String


  // Created / Updated Relations
  createdProducts Product[] @relation("createdByUser")
  updatedProducts Product[] @relation("updatedByUser")
  createdPrivateLessons PrivateLesson[] @relation("createdByUser")
  updatedPrivateLessons PrivateLesson[] @relation("updatedByUser")
  createdSocialDances SocialDance[] @relation("createdByUser")
  updatedSocialDances SocialDance[] @relation("updatedByUser")
  createdGroupClasses GroupClass[] @relation("createdByUser")
  updatedGroupClasses GroupClass[] @relation("updatedByUser")
  createdTeachers Teacher[] @relation("createdByUser")
  updatedTeachers Teacher[] @relation("updatedByUser")
  createdDanceMoves DanceMove[] @relation("createdByUser")
  updatedDanceMoves DanceMove[] @relation("updatedByUser")

  // Many to Many Relations
  groupClasses JoinUsersAndGroupClasses[]
  privateLessons JoinUsersAndPrivateLessons[]
  socialDances JoinUsersAndSocialDances[]
  danceMoves JoinUsersAndDanceMoves[]

  // One to One Relation
  permission Permission?

  // One to Many Relation
  orders     Order[]
}

// ================================ PERMISSION ====================================== //
enum Role {
  Admin
  Employee
  Customer
  Visitor
}
enum Group {
  Developer
  Member
  CoreTeacher
  Volunteer
}
model Permission {
  userId Int

  role   Role
  groups Group[]

  // A Permission set applies to one User
  user User @relation(fields: [userId], references: [id])

  @@unique(userId)

  // Indexes
  @@index([role])
  @@index([userId], type: Hash)
}

// ================================ Product ====================================== //
model Product {
  // Identifiers
  id        Int      @id @default(autoincrement())
  // External Identifiers
  stripeProductId Int
  stripePriceIds Int[]


  // Defaults
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdById Int?
  createdBy User? @relation("createdByUser", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy User? @relation("updatedByUser", fields: [updatedById], references: [id])


  // Relations
  orders        Order[]
  privateLesson PrivateLesson?
  socialDance   SocialDance?
  groupClass    GroupClass?
}

// ================================ Orders / Tickets ====================================== //
model Order {
  // Identifiers
  id        Int      @unique @default(autoincrement())
  userId    Int
  productId Int

  // external Identifiers
  stripeCustomerId Int?
  stripePriceId Int?

  // Data
  quantity         Int
  amountPaid       Int
  discounts        String[]
  date             DateTime @default(now()) @db.Timestamptz()

  ticket  Ticket  @relation(fields: [id], references: [orderId])
  user    User    @relation(fields: [userId], references: [id])
  product Product    @relation(fields: [productId], references: [id])

  @@unique([id, userId, productId])
}

// CONTAINS DENORMALIZED DATA
// This shit needs to be really fast
model Ticket {
  // Identifiers
  orderId Int @unique

  // Data
  // Denormalized
  productName    String @default("STL Swing Ticket")
  purchaserName  String @default("STL Swing Customer")
  purchaserEmail String

  // Normalized
  creditsRemaining Int      @default(1)
  validUntil       DateTime @db.Timestamptz()
  shared           Boolean  @default(true)

  order Order?

  @@index([orderId], type: Hash)
}

// ================================ Private Lesson ====================================== //
model PrivateLesson {
  // Identifiers
  id Int     @unique

  // Defaults
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdById Int?
  createdBy User? @relation("createdByUser", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy User? @relation("updatedByUser", fields: [updatedById], references: [id])

  // Event Data
  googleCalendarId String?
  googleEventId    String?
  facebookEventId  String?
  meetupEventId    String?
  start       DateTime @db.Timestamptz()
  end         DateTime @db.Timestamptz()
  recurrence  String
  location    String

  // Data
  name String
  description String
  imageUrl    String?

  // Relations
  product   Product @relation(fields: [id], references: [id])
  teachers JoinTeachersAndPrivateLessons[]
  students JoinUsersAndPrivateLessons[]
}

// ================================ Social Dance ====================================== //
model SocialDance {
  // Identifiers
  id Int     @unique

  // Defaults
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdById Int?
  createdBy User? @relation("createdByUser", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy User? @relation("updatedByUser", fields: [updatedById], references: [id])

  // Event Data
  googleCalendarId String?
  googleEventId    String?
  facebookEventId  String?
  meetupEventId    String?
  start       DateTime @db.Timestamptz()
  end         DateTime @db.Timestamptz()
  recurrence  String?
  location    String

  // Data
  name String
  description String
  imageUrl    String?


  product   Product @relation(fields: [id], references: [id])
  attendees JoinUsersAndSocialDances[]
}

// ================================ Group Class ====================================== //
model GroupClass {
  // Identifiers
  id Int     @unique

  // Defaults
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdById Int?
  createdBy User? @relation("createdByUser", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy User? @relation("updatedByUser", fields: [updatedById], references: [id])

  // Event Data
  googleCalendarId String?
  googleEventId    String?
  facebookEventId  String?
  meetupEventId    String?
  start       DateTime @db.Timestamptz()
  end         DateTime @db.Timestamptz()
  recurrence  String?
  location    String

  // Data
  name String
  description String
  difficultyLevel     String
  danceType String
  imageUrl    String?

  // Relations
  product   Product @relation(fields: [id], references: [id])
  danceMoves JoinGroupClassAndDanceMoves[]
  teachers      JoinTeachersAndGroupClasses[]
  attendees JoinUsersAndGroupClasses[]
}



model Teacher {
  // Identifiers
  id Int @unique

  // Defaults
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdById Int?
  createdBy User? @relation("createdByUser", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy User? @relation("updatedByUser", fields: [updatedById], references: [id])

  // Data
  name        String
  description String
  photoUrl    String
  videoUrl    String
  speciality  String

  groupClasses         JoinTeachersAndGroupClasses[]
  PrivateLessonTeacher JoinTeachersAndPrivateLessons[]
}

model DanceMove {
  // Identifiers
  id Int @id @unique @default(autoincrement())

  // Fragment {Defaults}
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  createdById Int?
  createdBy User? @relation("createdByUser", fields: [createdById], references: [id])
  updatedById Int?
  updatedBy User? @relation("updatedByUser", fields: [updatedById], references: [id])

  // Data
  name            String
  videoUrl        String
  description     String
  difficultyLevel String
  danceForm       String

  users JoinUsersAndDanceMoves[]
  groupClasses JoinGroupClassAndDanceMoves[]
}

// ================================ Join Tables ====================================== //
model JoinTeachersAndGroupClasses {
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  teacherId    Int
  groupClass   GroupClass @relation(fields: [groupClassId], references: [id])
  groupClassId Int

  @@id([teacherId, groupClassId])
}

model JoinTeachersAndPrivateLessons {
  teacher         Teacher       @relation(fields: [teacherId], references: [id])
  teacherId       Int
  privateLesson   PrivateLesson @relation(fields: [privateLessonId], references: [id])
  privateLessonId Int

  @@id([teacherId, privateLessonId])
}

model JoinUsersAndGroupClasses {
  userId Int
  groupClassId Int

  user User @relation(fields: [userId], references: [id])
  groupClass GroupClass @relation(fields: [groupClassId], references: [id])

  @@id([userId, groupClassId])
}

model JoinUsersAndPrivateLessons {
  userId Int
  privateLessonId Int

  user User @relation(fields: [userId], references: [id])
  privateLesson PrivateLesson @relation(fields: [privateLessonId], references: [id])

  @@id([userId, privateLessonId])
}

model JoinUsersAndSocialDances {
  userId Int
  socialDanceId Int

  user User @relation(fields: [userId], references: [id])
  socialDance SocialDance @relation(fields: [socialDanceId], references: [id])

  @@id([userId, socialDanceId])
}

enum GroupClassDanceMoveType {
  Required
  Taught
}

model JoinGroupClassAndDanceMoves {
  type GroupClassDanceMoveType
  groupClassId Int
  danceMoveId Int

  danceMove DanceMove @relation(fields: [danceMoveId], references: [id])
  groupClass GroupClass @relation(fields: [groupClassId], references: [id])

  @@id([groupClassId, danceMoveId])
}


model JoinUsersAndDanceMoves {
  type String
  userId Int
  danceMoveId Int

  danceMove DanceMove @relation(fields: [danceMoveId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([danceMoveId, userId])
}
